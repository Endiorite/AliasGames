<?php

namespace Bedwars\game;

use Alias\game\GameInformation;
use Alias\game\RankedInformation;
use Alias\game\Team;
use Alias\game\TeamableGame;
use Alias\handlers\TimerHandler;
use Alias\players\Scoreboard;
use Alias\utils\Utils;
use Bedwars\constants\BedwarsMessages;
use Bedwars\game\maps\MythologyMap;
use Bedwars\game\teams\RedTeam;
use pocketmine\event\block\BlockBreakEvent;
use pocketmine\event\player\PlayerDeathEvent;
use pocketmine\player\Player;
use pocketmine\Server;
use pocketmine\utils\TextFormat;
use pocketmine\world\Position;
use pocketmine\world\World;
use pocketmine\world\WorldManager;

class BedwarsGame extends TeamableGame
{

    private int $time;

    private bool $instantDeath = false;
    public function init(string $uuid, bool $isRanked): void
    {
        parent::init($uuid, $isRanked);
        $world = $this->getWorld();
        $this->addTeam(new RedTeam(new Position(0, 0, 0, $world), new Position(0, 0, 0, $world)));

        $this->time = time() + 15*60;
    }

    public function getWorld(): ?World{
        return Server::getInstance()->getWorldManager()->getWorldByName($this->getWorldName());
    }

    public function onUpdate(): void
    {
        $restantTime = $this->time - time();

        foreach ($this->getTeams() as $team){
            if (count($team->getPlayers()) <= 0){
                $team->bedBreak();
            }
        }

        $time = Utils::getInstance()->convertTime($restantTime);

        foreach ($this->getAvalaiblePlayers() as $player){
            $team = $this->getPlayerTeam($player);
            $scoreboard = new Scoreboard($player->getName(), "bedwars.scoreboard", "§l§eBEDWARS");
            $scoreboard->setLine(0, TextFormat::GRAY . $this->getUuid());
            $scoreboard->setLine(1, "      ");
            $scoreboard->setLine(2, "Mort Subite dans §2" . $time["minutes"] . ":" . $time["seconds"]);
            $scoreboard->setLine(3, "      ");
            $line = 4;
            foreach ($this->getTeams() as $team){
                $restantPlayerCount = count($team->getRestantPlayers());
                $icon = match (true){
                    !$team->isBedDestroy() => '',
                    $team->isBedDestroy() && $restantPlayerCount > 0 => "2" . count($team->getRestantPlayers()),
                    default => ''
                };

                $you = match ($team->inTeam($player)){
                    default => " §7YOU"
                };
                $scoreboard->setLine($line, $team->getName() . "§r§f: " . $icon . $you);
                $line++;
            }

            $scoreboard->setLine($line+1, "   ");
            $scoreboard->setLine($line+2, "Bed Destroyed: §c" . $team->getTeamDestroy());
            $scoreboard->setLine($line+3, "   ");
            $scoreboard->setLine($line+4, "§6alias.net");

            $scoreboard->show();
        }

        if ($restantTime <= 0 && !$this->instantDeath){
            $this->broadcastMessage(BedwarsMessages::BREAK_ALL_BED);
            $this->instantDeath = true;

            foreach ($this->getTeams() as $team){
                $team->bedBreak();
            }
        }
    }

    public function onBlockBreak(BlockBreakEvent $event): void
    {
        $block = $event->getBlock();
        $position = $block->getPosition();
        $player = $event->getPlayer();

        $playerTeam = $this->getPlayerTeam($player);
        if (is_null($playerTeam)) return;

        foreach ($this->getTeams() as $team){
            if ($team->getBedPosition()->equals($position->asVector3())){
                if ($team->inTeam($player->getName())){
                    $event->cancel();
                    $player->sendMessage(BedwarsMessages::CANT_BREAK_YOUR_BED);
                }else{
                    $this->broadcastMessage(BedwarsMessages::BED_BREAK, ["{player}", "{team}"], [$player->getName(), $team->getName()]);
                    $team->bedBreak();

                    $playerTeam->addTeamDestroy();
                }
            }
        }
    }

    public function onDeath(PlayerDeathEvent $event): void
    {
        parent::onDeath($event);

        $player = $event->getPlayer();
        $playerGame = $this->getPlayerGame($player->getName());
        $team = $this->getPlayerTeam($player);

        if (!$team->canRespawn()){
            $playerGame->setLife(0);
        }
    }

    public function getPlayerTeam(Player $player): BedwarsTeam|Team|null
    {
        return parent::getPlayerTeam($player); // TODO: Change the autogenerated stub
    }

    /**
     * @return BedwarsTeam[]
     */
    public function getTeams(): array
    {
        return parent::getTeams(); // TODO: Change the autogenerated stub
    }

    public function getGameInformation(): GameInformation
    {
        return new GameInformation(
            "bedwars_2v2",
            PHP_INT_MAX,
            4,
            8,
        );
    }

    public function getRankedInformation(): ?RankedInformation
    {
        return new RankedInformation();
    }

    /**
     * @inheritDoc
     */
    public function getMaps(): array
    {
        return [
            new MythologyMap()
        ];
    }
}